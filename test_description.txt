React Movie Search App

Technology: React.js Next.js

Title: React Movie Search App

Description
Build a responsive two-page React application that consumes the TMDB (The Movie Database) public
API to display trending movies and detailed information. Implement a search page with infinite scroll
and a movie detail page. Emphasis is placed on API consumption, clean UI/UX, and code quality.

Project Steps (tasks to achieve in this test):
    1. API Setup & CORS Handling
        • Disable CORS in your browser to allow API requests.
        • Guide to disable CORS
    2. Trending Movies Fetch
        • Use the endpoint:
        https://api.themoviedb.org/3/trending/{media_type}/{time_window}
        • Make only 1 request per second to avoid timeouts.
    3. Movie Search Page
        • A large search bar at the top
        • Display results as a list or grid with:
        • Poster
        • Title
        • Clickable card to navigate to the movie detail page
        • Implement infinite scroll manually (do not use a library)
        • Add pagination if possible
    4. Movie Detail Page
        • Back link to return to search
        • Show at minimum:
        • Title
        • Poster
        • Synopsis
        • Optional:
        • Cast list
    5. Styling
        • Use TailwindCSS
        • Responsive design is mandatory
        • Follow TMDB site for UI inspiration
        • Header: TMDB logo
        • Footer: simple with fake or real links
        • Coherent design system (buttons, fonts)
    6. Meta & UX Optimizations
        • Add <title> and meta descriptions
        • Optimize layout and interactions for a better user experience
    7. Write Unit Tests
        • Ensure core functionalities are tested with Jest or similar plugin.
    8. Code & Documentation
        • Use React.js Or Next.js
        • Use Axios to consume APIs
        • Provide README with installation and run commands (ex: npm install && npm run
        dev)
        • Mention the sources and references used (Stack Overflow, GitHub repos, etc.)

Guidelines:
    - You must at least complete 6 steps.
    - Your commits should be clear and reflect your thought process.
    - The expected technologies are Jest, Axios, and a state management tool (Redux, Mobx, or
    equivalent).
    - The application's design (UI) is up to you.

Resources:
- Mockoon download link.
- Use the attached weather_mockoon.json environment file.

Duration: 24 hours.

Good luck! If you are passionate about building this challenge and want to showcase your skills as
part of an amazing team, let's code now!